// SmallArena GCaMP Tracking
// Dirk Albrecht, Johannes Larsch
//March, 2013
//


macro "NeuronTracking [t]" {


// Track setting Defaults are read from txt file
//TrackSettingfile="D:\\TrckSett_awa_2p5x_4pxSqcMOS.txt";
//TrackSettingfile="D:\\TrckSett_awa_2p5x_4pxSq.txt";

TrackSettingfile="C:\\Users\\DuCheng\\Documents\\MATLAB\\FromMayToDu\\TrckSett_awc_5x_6pxSq_2013.txt";

TrckSttng=newArray(25);
TrckSttng=ReadSettings(TrckSttng,TrackSettingfile);

animal = TrckSttng[0];
lower=TrckSttng[1];	//threshold
upper=65535; 		//threshold 
h = TrckSttng[2];	//height of search window for tracking
w = TrckSttng[3];	//whidth of search window for tracking

sqsize = TrckSttng[4];	//size of square for intensity measurement of neuron
maxsize = TrckSttng[5];	//upper limit of particle size for tracking
minsize = TrckSttng[6];	//lower limit of particle size for tracking
expandAllow=TrckSttng[7]; //limit of allowed expansion of search window for tracking

offsetx = 0;
offsety = 0;


// Default variables. not relevant for tracking function

FrameForNeuronClick=1; // choose a frame when fluorescence is expected high to fascilitate neuron selection
ThresholdDefaultMin=1290;
ThresholdDefaultMax=65535;
animalThreshold = newArray(25); // array of animal specific lower thresholds
trackFolder=1; //1: track folder; 0: track open file


//-------------------------------------------------

// check if images open.
// if images open, track single movie.
// else, ask for directory for batch tracking


//dir="e:\\f\\20121127_awa_doseResp_n2upVsChe2dn\\";
dir="f:\\20130808_01_da_n2_gcy28GCaMP22b_doseResponse\\";
//dir = getDirectory("choose a directory for stationary tracking");
if (nImages==0){

	trackFolder=1;

	list = getFileList(dir);
	newlist = newArray(list.length);
	k=0;
	for (i=0; i < list.length; i++)  {
		if (endsWith(list[i], ".tif")) {
			newlist[k] = list[i];
			k++;
		}
	}
	
	list = Array.trim(newlist, k);

	startFile=getNumber("found "+list.length+" files, at what movie do you want to start tracking?", 1);
	startFile=startFile-1;
	endFile=getNumber("found "+list.length+" files, at what movie do you want to end tracking?", list.length);
	endFile=endFile-1;

	open(dir + list[startFile]);
	if (getVersion>="1.37r") setOption("DisablePopupMenu", true);
	
}else{
	if (getVersion>="1.37r") setOption("DisablePopupMenu", true);
	trackFolder=0;
// continue single movie tracking
}



// get neuron coordinates. either from position file or via manual selection
// if position files are found, ask if they should be used
// there are 2 types of position files
// 'PosFile' has positions in movie that was last tracked in current folder
// 'moviePosFile' is created for each movie during tracking

mainid = getImageID();
title = getTitle();
titleNoExt=substring(title,0,lengthOf(title)-4);

dir = getDirectory("image");
pathnoext = dir+substring(title,0,lengthOf(title)-4);

setSlice(FrameForNeuronClick);
run("Select None");
setThreshold(ThresholdDefaultMin, ThresholdDefaultMax);
updateDisplay();

useSavedPos ="no";
useSavedmoviePos ="no";

moviePosFile = dir+titleNoExt+"_Pos.txt";
PosFile=dir+"initialPos.txt";

if (File.exists(moviePosFile)==1){

  	Dialog.create("Positions found for current movie");
	Dialog.addChoice("Use saved Positions", newArray("yes", "no"));
	Dialog.show();
  	useSavedmoviePos = Dialog.getChoice();
}

if (File.exists(PosFile)==1){
	Dialog.create("Positions found for current folder");
	Dialog.addChoice("Use saved Positions", newArray("yes", "no"));
	Dialog.show();
	useSavedPos = Dialog.getChoice();
}

if (useSavedmoviePos=="yes"){
	readfile=moviePosFile;
}else if (useSavedPos=="yes") {
	readfile=PosFile;
}else{
	readfile="none";
}


// read animal info from position file

if (readfile!="none"){ 

	xpAll=ReadAnimalInfo(readfile,"x","y");
	ypAll=ReadAnimalInfo(readfile,"y","a");
	animalThreshold=ReadAnimalInfo(readfile,"t","f");
	redFlag=ReadAnimalInfo(readfile,"f","g");
	useTracking=ReadAnimalInfo(readfile,"g","xo");

	xoAll=ReadAnimalInfo(readfile,"xo","yo");
	yoAll=ReadAnimalInfo(readfile,"yo","end");

//temporarily draw rectangles on neuron positions

	for (animal=0; (animal<xpAll.length); animal++) {
		xc=xpAll[animal]; 
		yc=ypAll[animal];
		xo=xoAll[animal];
		yo=yoAll[animal];
		makeRectangle(xc - sqsize/2, yc - sqsize/2, sqsize, sqsize);
		run("Add Selection...", "stroke=green width=1 fill=0");

		makeRectangle(xc - sqsize/2 + xo, yc - sqsize/2 + yo, sqsize, sqsize);
		run("Add Selection...", "stroke=yellow width=1 fill=0");
		print("x",xc,"y",yc,"a",animal,"t",animalThreshold[animal],"f",redFlag[animal],"g",useTracking[animal],"xo",xo,"yo",yo);
	}
animal++;
firstAnimal=0;
}

//get neuron positions manually if no posFiles found or not wanted
else{
	// get all neuron positions by manual selection
	xpAll = newArray(100);
	ypAll = newArray(100);
	redFlag=newArray(100);
	useTracking=newArray(100);
	xoAll=newArray(100);
	yoAll=newArray(100);
	doneWithPicking=0;

	// how many animals have been tracked for this movie already?(an#.txt files)

	firstAnimal=-1;
	do {
		firstAnimal++;
		logname = pathnoext+".an"+firstAnimal+".txt";
	} while (File.exists(logname));

	for (animal=firstAnimal; !doneWithPicking; animal++) {
		

		do{
			showStatus("Select center point of the neuron:"); 
			updateDisplay();
			getCursorLoc(xc, yc, z, flags);
			doneWithPicking= (flags==4);
			//getThreshold(lower, upper);
			//animalThreshold[animal] = lower;
			wait(50);
			a=(flags != 16);
			b=!doneWithPicking;
			c=a && b;
		} while (c);
wait(500);
		do{
			showStatus("Select ROI:"); 
			updateDisplay();
			getCursorLoc(xoc, yoc, z, flags);
			doneWithPicking= (flags==4);
			getThreshold(lower, upper);
			animalThreshold[animal] = lower;
			wait(50);
			a=(flags != 16);
			b=!doneWithPicking;
			c=a && b;
		} while (c);

		redFlag[animal]=0;
		useTracking[animal]=1;
		xpAll[animal] = xc; ypAll[animal] = yc;
		xoAll[animal] = xoc-xc; yoAll[animal] = yoc-yc;
		print(xoc,",",yoc);
		if(b) print("x",xc,"y",yc,"a",animal,"t",lower,"f",0,"g",1,"xo",xoAll[animal],"yo",yoAll[animal]);
		slice = getSliceNumber();
		wait(1000);
	}
}

selectWindow(title); 


if (trackFolder==1){

AnimalsToTrack=animal-1; 
close();


//for (i=startFile; i<endFile; i+=5) { //start with early movies
for (i=startFile; i<=endFile; i++) { //start with early movies
  
	open(dir + list[i]);
	title = getTitle(); 
	titleNoExt=substring(title,0,lengthOf(title)-4);   
	moviePosFile = dir+titleNoExt+"_Pos.txt";

  script =
    "lw = WindowManager.getFrame('"+title+"');\n"+
    "if (lw!=null) {\n"+
    "   lw.setLocation(20,20);\n"+
    "}\n";
  eval("script", script); 

  script =
    "lw = WindowManager.getFrame('Log');\n"+
    "if (lw!=null) {\n"+
    "   lw.setLocation(10,800);\n"+
    "   lw.setSize(800, 200)\n"+
    "}\n";
  eval("script", script); 


// save previous neuron endPositions
// save to initialPos.txt and file specific moviePos.txt

	selectWindow("Log");	
	print("\\Clear");
	for (animal=firstAnimal; animal<AnimalsToTrack; animal++) {
		print("x",xpAll[animal],"y",ypAll[animal],"a",animal,"t",animalThreshold[animal],"f",redFlag[animal],"g",useTracking[animal],"xo",xoAll[animal],"yo",yoAll[animal]);
	}


	selectWindow("Log");
	wait(150); //for some reason, needs long dealy here to work
	selectWindow("Log");
	wait(150);
	saveAs("Text",PosFile);
	selectWindow("Log");
	wait(150);
	selectWindow("Log");
	wait(150);
	saveAs("Text",moviePosFile);
	print("\\Clear");

	selectWindow(title); 

	updateDisplay();

	for (animal=firstAnimal; animal<AnimalsToTrack; animal++) {
		setThreshold(animalThreshold[animal], upper);
		updateDisplay();
		xc = xpAll[animal]; 
		yc = ypAll[animal];
		xo = xoAll[animal]; 
		yo = yoAll[animal];
		
		// update TrckSttng variable with info for this animal before calling the tracker
		TrckSttng[1]= animal;
		TrckSttng[2]=animalThreshold[animal];
		TrckSttng[3]=h;
		TrckSttng[4]=w;
		TrckSttng[5]=xo;
		TrckSttng[6]=yo;
		TrckSttng[7]=sqsize;
		TrckSttng[8]=maxsize;
		TrckSttng[9]=minsize;
		TrckSttng[10]=expandAllow;
		TrckSttng[11]=xc;
		TrckSttng[12]=yc;
		TrckSttng[14]=redFlag[animal];
		TrckSttng[15]=useTracking[animal];


		setSlice(1);
		TrckSttng=SmallArenaTrackerBatch(TrckSttng);
		lower=TrckSttng[2];
		xc=TrckSttng[11];
		yc=TrckSttng[12];
		xo=TrckSttng[5];
		yo=TrckSttng[6];
		redFlag[animal]=TrckSttng[14];
		useTracking[animal]=TrckSttng[15];
		animalThreshold[animal] = lower;
		xpAll[animal] = xc; ypAll[animal] = yc;
		xoAll[animal] = xo; yoAll[animal] = yo;
		print(xc,yc);
	}
	selectWindow(title); close();
	animal=0;

}}

		if (trackFolder==0){
		animal=0;
		xc = xpAll[animal]; 
		yc = ypAll[animal];
		xo = xoAll[animal]; 
		yo = yoAll[animal];
		getThreshold(lower, upper);
		animalThreshold[animal] = lower;
		// update TrckSttng variable with info for this animal before calling the tracker
		TrckSttng[1]= animal;
		TrckSttng[2]=animalThreshold[animal];
		TrckSttng[3]=h;
		TrckSttng[4]=w;
		TrckSttng[5]=xo;
		TrckSttng[6]=yo;
		TrckSttng[7]=sqsize;
		TrckSttng[8]=maxsize;
		TrckSttng[9]=minsize;
		TrckSttng[10]=expandAllow;
		TrckSttng[11]=xc;
		TrckSttng[12]=yc;
		TrckSttng[14]=0;
		//TrckSttng[15]=useTracking;
		TrckSttng[15]=1;
		setSlice(1);

		selectWindow("Log");
		print("start tracking");
		TrckSttng=SmallArenaTrackerBatch(TrckSttng);

}


} //end macro NeuronTracking [t]

//-----------------------------------------------------------------------s


function ReadSettings(TrckSttng,file){
//file="C:\Users\DuCheng\Documents\MATLAB\FromMayToDu\TrckSett_awc_5x_6pxSq_2013"
string = File.openAsString(file);
xlines = split(string, "\n");
n_xlines = lengthOf(xlines);

for (n=0; n<n_xlines; n++)
    {
    TrckSttng[n] = substring(xlines[n],0,indexOf(xlines[n],"//")-1);
    }

return TrckSttng;
}

//-----------------------------------------------------------------------

function ReadAnimalInfo(PosFile,ID1,ID2){

string = File.openAsString(PosFile);
lines = split(string, "\n");
n_lines = lengthOf(lines);
AnimalInfo=newArray(n_lines);

for (n=0; n<n_lines; n++)
	{
	if (ID2=="end"){
		AnimalInfo[n] = substring(lines[n],indexOf(lines[n],ID1)+2);
	}else{
    		AnimalInfo[n] = substring(lines[n],indexOf(lines[n],ID1)+2,indexOf(lines[n],ID2)-1);
	}

}

return AnimalInfo;
}



//-------------------------------------------------------


function SmallArenaTrackerBatch(TrckSttng){
// this version of the tracker can be called once the neuron positions are known

animal=TrckSttng[1];
//lower=TrckSttng[2];
lower=600;
h=TrckSttng[3];
w=TrckSttng[4];
xo=TrckSttng[5];
yo=TrckSttng[6];
sqsize=TrckSttng[7];
maxsize=TrckSttng[8];
minsize=TrckSttng[9];
expandallow=TrckSttng[10];
xc=TrckSttng[11];
yc=TrckSttng[12];
redFlag=TrckSttng[14];
useTracking=TrckSttng[15];

noiseMax=0;
print(xc,yc);

// Go to beginning of stack


mainid = getImageID();
title = getTitle();
dir = getDirectory("image");
pathnoext = dir+substring(title,0,lengthOf(title)-4);


// Initialize variables
area = 0; maxint = 0; intdens = 0; x = xc; y = yc; intsub = 0; sqintdens =0; sqintsub =0; sqarea = 0; avg = 0; dx = 0; dy = 0;
//X = newArray(nSlices);
//Y = newArray(nSlices);
//Int1 = newArray(nSlices);
//Int2 = newArray(nSlices);
//BgMed = newArray(nSlices);
//Avg = newArray(nSlices);
xp = xc; yp = yc;


searchBoxScale=0.4;

print("\\Clear");
print("Slice,xc,yc,intdens,intsub,bgmedian,maxint,area,x,y,sqintdens,sqintsub,sqarea,threshold,animal,redFlag,xOffset,yOffset");

selectWindow(title);
setThreshold(lower, 65535);

for (slice=1; slice<=nSlices; slice++)  {

	
setSlice(slice);

// Allow manual pausing via spacebar

//if(slice%3==0){
//print("hello");
//selectWindow(title); //this command slows down tracking A LOT! necessary to detect keyDown reliably!
//}

anyKeyDown=0;
anyKeyDown=isKeyDown("space") || isKeyDown("shift") || isKeyDown("alt"); //avoiding if statements in loop
if(anyKeyDown){

	if (isKeyDown("space")) {
		
		do {
			showStatus("Select center point of the neuron:"); 
			getCursorLoc(xc, yc, z, flags);
			wait(50);
		} while (flags != 16);

		xp = xc; yp = yc;
		wait(300);
		do {
			showStatus("Select ROI"); 
			getCursorLoc(xoc, yoc, z, flags);
			wait(50);
		} while (flags != 16);

		xo= xoc-xc; yo = yoc-yc;

		slice = getSliceNumber();
			// Remove upper threshold limit
			getThreshold(lower, upper);
			wait(100);
			setThreshold(lower, 65535);
	}

	// Allow stationary tracking via 'shift' toggle
	if (isKeyDown("shift")) {
		if (useTracking == 0) {
			wait(400);
			useTracking=1;
		
		}else if (useTracking == 1) {
			wait(400);
			useTracking=0;
		}

	}

	//Allow flagging via 'alt'
	if (isKeyDown("alt")) {
		if (redFlag == 0) {
			wait(400);
			redFlag=1;
		}
		else if (redFlag == 1) {
			wait(400);
			redFlag=0;
		}

	}

}

	


	if (useTracking == 1) {

		makeOval(xc - searchBoxScale*w, yc - searchBoxScale*h, w, h);
	
		run("Set Measurements...", "area min integrated limit redirect=None decimal=1");
		run("Measure");
		maxint=getResult("Max", 0);
		intdens = getResult("IntDen", 0);
		area = getResult("Area", 0);
		avg = intdens / area;
		//if (noiseMax == 0) {
		//	noiseMax=maxint/4;
		//}
		noiseMax=100;

		run("Find Maxima...", "noise="+noiseMax+" output=List");
		
		if (nResults == 1) {

			xc = getResult("X", 0);
			yc = getResult("Y", 0);

		}else if (nResults > 1) {
			do {
				noiseMax=noiseMax+5;
				run("Find Maxima...", "noise="+noiseMax+" output=List");
			} while (nResults > 1);
			if (nResults == 1){
				xc = getResult("X", 0);
				yc = getResult("Y", 0);}


		} else {
			do {
				noiseMax=noiseMax-10;
				run("Find Maxima...", "noise="+noiseMax+" output=List");
			} while ((nResults < 1) && (noiseMax >= 40));

if (nResults == 1) {
			xc = getResult("X", 0);
			yc = getResult("Y", 0);
} else {


		

			
			//makeRectangle(x - sqsize/2, y - sqsize/2, sqsize, sqsize);
			run("Select None");
				do {
					showStatus("Select center point of the neuron:"); 
					getCursorLoc(xc, yc, z, flags);
					wait(50);
				} while (flags != 16);
			
				xp = xc; yp = yc;


				slice = getSliceNumber();

				// Remove upper threshold limit
				//getThreshold(lower, upper);
				wait(100);
				//setThreshold(lower, 65535);

			
		}
}
	}




	// set small region around neuron center
	makeRectangle(xc - sqsize/2 +xo , yc - sqsize/2 +yo, sqsize, sqsize);
	run("Clear Results");
	//setThreshold(lower, 65535);
	run("Set Measurements...", "area min centroid center integrated slice redirect=None decimal=1");
	run("Measure");
	//if (nResults == 1) {
		sqarea = getResult("Area", 0);
		sqintdens = getResult("IntDen", 0);
	//}
	run("Add Selection...", "stroke=yellow width=1 fill=0");
	Overlay.setPosition(slice);

	// get background
	//makeOval(xc - 0.5*w + offsetx, yc - 0.5*h + offsety, w, h);
	//makeOval(xc - 1.2*w, yc - 1.2*h, 2.4*w, 2.4*h);
	//setKeyDown("alt");
	//makeOval(xc - 0.7*w, yc - 0.7*h, 1.4*w, 1.4*h);

	makeOval(xc - 32, yc - 32, 64, 64);
	setKeyDown("alt");
	makeOval(xc - 30, yc - 30, 60, 60);

	run("Clear Results");
	run("Set Measurements...", "area mean min median slice redirect=None decimal=1");
	run("Measure");
	getHistogram(values, counts, 6);
	//if (nResults == 1) {
		//bgavg = getResult("Mean", 0);
		bgmedian = getResult("Median", 0);
		//bgmedian = values[2];
		intsub = intdens - (area * bgmedian);
		sqintsub = sqintdens - (sqarea * bgmedian);
	//}

	//dx = xc-xp; dy = yc-yp;
	print(slice+","+xc+","+yc+","+intdens+","+intsub+","+bgmedian+","+maxint+","+area+","+x+","+y+","+sqintdens+","+sqintsub+","+sqarea+","+lower+","+animal+","+redFlag+","+useTracking+","+xo+","+yo);
	

	
	//Velocity prediction
	xp = xc; yp = yc;
	//xc = xc + dx/2; yc = yc+dy/2;
}



       // Plot.create("Position", "Frame", "Pixels", X);
       // Plot.setLimits(0, nSlices, 0, 512);
       // Plot.setColor("red");
       // Plot.add("line", Y);
       // Plot.setColor("blue");


	//Plot.create("Integrated intensity", "Frame", "Sq. Intensity", Int2);

      //  Plot.show();
	//setLocation(5, 400);

	selectWindow("Log");
	logname = pathnoext+".an"+animal+".txt";

	action = "";

		do {
			animal++;
			logname = pathnoext+".an"+animal+".txt";
		} while (File.exists(logname));
		
		selectWindow("Log");
		
		wait(150);
		selectWindow("Log");
		wait(150);
		saveAs("Text",logname);
	
	print(action);
	print("Saved to logfile: "+logname);
	//selectWindow("Integrated intensity");
	//	wait(100);
//close();
	
	selectWindow(title);

TrckSttng[2]=lower;
TrckSttng[11]=xc;
TrckSttng[12]=yc;

TrckSttng[14]=redFlag;
TrckSttng[15]=useTracking;

TrckSttng[5]=xo;
TrckSttng[6]=yo;

return TrckSttng;

} // end function SmallArenaTracker
